##############################################################
# CLTV Prediction with BG-NBD and Gamma-Gamma
##############################################################

###############################################################
# Business Problem
###############################################################
# A shoe company wants to define a roadmap for sales and marketing activities.
# In order for the company to make a medium to long term plan, it is necessary to estimate
# the potential value that existing customers will provide to the company in the future.


###############################################################
# Dataset Story
###############################################################

# The data set consists of information obtained from the past shopping behavior of customers
# who made their last purchases as OmniChannel (both online and offline shoppers) in 2020 - 2021.

# master_id: Unique customer number
# order_channel : Which channel of the shopping platform is used (Android, iOS, Desktop, Mobile, Offline)
# last_order_channel : The channel where the last purchase was made
# first_order_date : Date of the customer's first purchase
# last_order_date : Date of the customer's last purchase
# last_order_date_online : The date of the last purchase made by the customer on the online platform
# last_order_date_offline : Date of the last purchase made by the customer on the offline platform
# order_num_total_ever_online : Total number of purchases made by the customer on the online platform
# order_num_total_ever_offline : Total number of purchases made by the customer offline
# customer_value_total_ever_offline : Total price paid by the customer for offline purchases
# customer_value_total_ever_online : Total price paid by the customer for online purchases
# interested_in_categories_12 : List of categories the customer has shopped in the last 12 months


###############################################################
# TASKS
###############################################################
# TASK 1: Preparing the Data
# 1. Read the dataset. Make a copy of the dataframe.
# 2. Define the outlier_thresholds and replace_with_thresholds functions to suppress outliers.
# Note: When calculating cltv, the frequency values must be integers, so round the lower and
# upper limits with round().
# 3. Suppress the outliers of "order_num_total_ever_online", "order_num_total_ever_offline",
# "customer_value_total_ever_offline", "customer_value_total_ever_online" variables.
# 4. Omnichannel implies that customers shop both online and offline. Create new variables
# for each customer's total number of purchases and spending.
# 5. Examine the types of variables. Change the type of variables that express date to date.

# TASK 2: Setting up the CLTV Data Structure
# 1. Take 2 days after the date of the last purchase in the dataset as the analysis date.
# 2.Create a new cltv dataframe with customer_id, recency_cltv_weekly, T_weekly, frequency and monetary_cltv_avg.
# The monetary value will be expressed as the average value per purchase, and the recency and tenure values will
# be expressed in weekly terms.

# TASK 3: Establishment of BG/NBD, Gamma-Gamma Models, calculation of CLTV
# 1. Fit the BG/NBD model.
    # a. Forecast expected purchases from customers in 3 months and add to the cltv dataframe as exp_sales_3_month.
    # b. Forecast the expected purchases from customers in 6 months and add to the cltv dataframe as exp_sales_6_month.
# 2. Fit the Gamma-Gamma model. Estimate the average value that customers will leave and add it to the cltv dataframe as exp_average_value.
# 3. Calculate CLTV for 6 months and add it to the dataframe as cltv.
     # b. Observe the 20 people with the highest CLTV.

# TASK 4: Creation of Segments According to CLTV
# 1. Divide all your 6-month customers into 4 groups (segments) and add the group names to the dataset.
# Add them to the dataframe with the name cltv_segment.
# 2. Make short 6-month action suggestions to the management for 2 groups you will choose among 4 groups

# BONUS: Functionalize the whole process.


###############################################################
# TASK 1: Preparing the Data
###############################################################


# 1. Read the OmniChannel.csv data. Make a copy of the dataframe.

import datetime as dt
import pandas as pd
import matplotlib.pyplot as plt
from lifetimes import BetaGeoFitter
from lifetimes import GammaGammaFitter
from lifetimes.plotting import plot_period_transactions
pd.set_option('display.max_columns', None)
pd.set_option('display.width', 500)
pd.set_option('display.float_format', lambda x: '%.4f' % x)
from sklearn.preprocessing import MinMaxScaler

df_ = pd.read_csv('dataset')
df = df_.copy()

# 2. Define the outlier_thresholds and replace_with_thresholds functions to suppress outliers.
# Note: When calculating cltv, the frequency values must be integers, so round the lower and upper limits with round().
def outlier_thresholds(dataframe, variable):
    quartiles1 = dataframe[variable].quantile(0.01)
    quartile3 = dataframe[variable].quantile(0.99)
    interquantile_rage = quartile3 - quartiles1
    up_limit = quartile3 + 1.5 * interquantile_rage
    low_limit = quartiles1 - 1.5 * interquantile_rage
    return round(low_limit), round(up_limit)

def replace_with_thresholds(dataframe, variable):
    low_limit, up_limit = outlier_thresholds(dataframe, variable)
    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit

df.head()
df.isnull().sum()
df.describe().T

# Suppress any outliers of "order_num_total_ever_online", "order_num_total_ever_offline",
# "customer_value_total_ever_offline", "customer_value_total_ever_online" variables.

df.info()

for i in df.select_dtypes(include=['number']).columns:
    replace_with_thresholds(df, i)

df.describe().T

# 4. Omnichannel means that customers shop both online and offline.
# Create new variables for each customer's total number of purchases and spend.

df['total_order_num'] = df['order_num_total_ever_online'] + df['order_num_total_ever_offline']
df['total_order_value'] = df['customer_value_total_ever_offline'] + df['customer_value_total_ever_online']

# 5. Examine the types of variables. Change the type of variables that express date to date.

df.info()

for i in df.columns:
    if "date" in i:
        df[i] = pd.to_datetime(df[i])

###############################################################
# TASK 2: Setting up the CLTV Data Structure
###############################################################

# 1. Take 2 days after the date of the last purchase in the dataset as the analysis date.

today_date= df['last_order_date'].max() + pd.Timedelta(days = 2)


# Create a new cltv dataframe with customer_id, recency_cltv_weekly, T_weekly, frequency and monetary_cltv_avg.

cltv_df = pd.DataFrame()
cltv_df["customer_id"] = df["master_id"]
cltv_df["recency_cltv_weekly"] = ((df["last_order_date"]- df["first_order_date"]).astype('timedelta64[D]')) / 7
cltv_df["T_weekly"] = ((today_date - df["first_order_date"]).astype('timedelta64[D]'))/7
cltv_df["frequency"] = df["total_order_num"]
cltv_df["monetary_cltv_avg"] = df["total_order_value"] / df["total_order_num"]

cltv_df.head()

###############################################################
# TASK 3: Establishment of BG/NBD, Gamma-Gamma Models, calculation of 6-month CLTV
###############################################################

# 1. Setting up the BG/NBD model.

bgf = BetaGeoFitter(penalizer_coef=0.001)
bgf.fit(cltv_df['frequency'],
        cltv_df['recency_cltv_weekly'],
        cltv_df['T_weekly'])


# Estimate the expected purchases from customers in 3 months and add it to the cltv dataframe as exp_sales_3_month.

cltv_df['exp_sales_3_month'] = bgf.predict(4*3,
                                           cltv_df['frequency'],
                                           cltv_df['recency_cltv_weekly'],
                                           cltv_df['T_weekly'])

# Estimate the expected purchases from customers in 6 months and add it to the cltv dataframe as exp_sales_6_month.

cltv_df['exp_sales_6_month'] = bgf.predict(4*6,
                                           cltv_df['frequency'],
                                           cltv_df['recency_cltv_weekly'],
                                           cltv_df['T_weekly'])

# Examine the top 10 purchasers in the 3rd and 6th month.

cltv_df.sort_values(by='exp_sales_3_month', ascending=False)[:10]
cltv_df.sort_values(by='exp_sales_6_month', ascending=False)[:10]

# Fit the Gamma-Gamma model. Estimate the average value that customers will leave
# and add it to the cltv dataframe as exp_average_value.

ggf = GammaGammaFitter(penalizer_coef=0.01)
ggf.fit(cltv_df['frequency'], cltv_df['monetary_cltv_avg'])
cltv_df['exp_average_value'] = ggf.conditional_expected_average_profit(cltv_df['frequency'],
                                                                       cltv_df['monetary_cltv_avg'])
cltv_df.head()

# Calculate the CLTV for 6 months and add it to the dataframe as cltv.

cltv = ggf.customer_lifetime_value(bgf,
                                   cltv_df['frequency'],
                                   cltv_df['recency_cltv_weekly'],
                                   cltv_df['T_weekly'],
                                   cltv_df['monetary_cltv_avg'],
                                   time= 6, # 6 month prediction
                                   freq= 'W', # The frequency of T
                                   discount_rate= 0.01)

cltv_df["cltv"] = cltv

# Observe the 20 people with the highest CLTV values.

cltv_df.sort_values(by='cltv',ascending=False)[:20]


###############################################################
# TASK 4: Creation of Segments According to CLTV
###############################################################

# 1. Divide all your customers into 4 groups (segments) according to 6 months CLTV and
# add the group names to the dataset, assign them with the name cltv_segment.

cltv_df['cltv_segment'] = pd.qcut(cltv_df['cltv'], 4, labels= ["D", "C", "B", "A"])
cltv_df.head()

# Examine the recency, frequnecy and monetary averages of the segments.

cltv_df.groupby('cltv_segment').agg({'recency_cltv_weekly': 'mean',
                                     'frequency': 'mean',
                                     'monetary_cltv_avg': 'mean'})

###############################################################
# BONUS: Functionalize the whole process.
###############################################################

def create_cltv_df(dataframe):

    # Data Preparation
    columns = ["order_num_total_ever_online", "order_num_total_ever_offline", "customer_value_total_ever_offline","customer_value_total_ever_online"]
    for col in columns:
        replace_with_thresholds(dataframe, col)

    dataframe["order_num_total"] = dataframe["order_num_total_ever_online"] + dataframe["order_num_total_ever_offline"]
    dataframe["customer_value_total"] = dataframe["customer_value_total_ever_offline"] + dataframe["customer_value_total_ever_online"]
    dataframe = dataframe[~(dataframe["customer_value_total"] == 0) | (dataframe["order_num_total"] == 0)]
    date_columns = dataframe.columns[dataframe.columns.str.contains("date")]
    dataframe[date_columns] = dataframe[date_columns].apply(pd.to_datetime)

    # Setting up the CLTV data structure
    dataframe["last_order_date"].max()  # 2021-05-30
    analysis_date = dt.datetime(2021, 6, 1)
    cltv_df = pd.DataFrame()
    cltv_df["customer_id"] = dataframe["master_id"]
    cltv_df["recency_cltv_weekly"] = ((dataframe["last_order_date"] - dataframe["first_order_date"]).astype('timedelta64[D]')) / 7
    cltv_df["T_weekly"] = ((analysis_date - dataframe["first_order_date"]).astype('timedelta64[D]')) / 7
    cltv_df["frequency"] = dataframe["order_num_total"]
    cltv_df["monetary_cltv_avg"] = dataframe["customer_value_total"] / dataframe["order_num_total"]
    cltv_df = cltv_df[(cltv_df['frequency'] > 1)]

    # Setting up the BG-NBD Model
    bgf = BetaGeoFitter(penalizer_coef=0.001)
    bgf.fit(cltv_df['frequency'],
            cltv_df['recency_cltv_weekly'],
            cltv_df['T_weekly'])
    cltv_df["exp_sales_3_month"] = bgf.predict(4 * 3,
                                               cltv_df['frequency'],
                                               cltv_df['recency_cltv_weekly'],
                                               cltv_df['T_weekly'])
    cltv_df["exp_sales_6_month"] = bgf.predict(4 * 6,
                                               cltv_df['frequency'],
                                               cltv_df['recency_cltv_weekly'],
                                               cltv_df['T_weekly'])

    # Setting up the Gamma-Gamma Model
    ggf = GammaGammaFitter(penalizer_coef=0.01)
    ggf.fit(cltv_df['frequency'], cltv_df['monetary_cltv_avg'])
    cltv_df["exp_average_value"] = ggf.conditional_expected_average_profit(cltv_df['frequency'],
                                                                           cltv_df['monetary_cltv_avg'])

    # CLTV prediction
    cltv = ggf.customer_lifetime_value(bgf,
                                       cltv_df['frequency'],
                                       cltv_df['recency_cltv_weekly'],
                                       cltv_df['T_weekly'],
                                       cltv_df['monetary_cltv_avg'],
                                       time=6,
                                       freq="W",
                                       discount_rate=0.01)
    cltv_df["cltv"] = cltv

    # CLTV segmentation
    cltv_df["cltv_segment"] = pd.qcut(cltv_df["cltv"], 4, labels=["D", "C", "B", "A"])

    return cltv_df

cltv_df = create_cltv_df(df)


cltv_df.head(10)









